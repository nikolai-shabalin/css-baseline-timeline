---
import type { FeatureEntry } from '../lib/rss';

export interface Props {
  title: string;
  features: FeatureEntry[];
  accent: 'widely' | 'newly';
}

const { title, features, accent } = Astro.props;

const accentLabel = accent === 'widely' ? 'WIDELY' : 'NEWLY';
const accentClass = `feature-list--${accent}`;

const dateFormatter = new Intl.DateTimeFormat('ru-RU', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
});

const monthYearFormatter = new Intl.DateTimeFormat('ru-RU', {
  year: 'numeric',
  month: 'long'
});

const formatDate = (input: string) => {
  if (!input) return '';
  const value = Date.parse(input);
  if (!Number.isFinite(value)) return '';
  return dateFormatter.format(new Date(value));
};

interface GroupedFeature {
  year: number;
  month: number;
  label: string;
  features: FeatureEntry[];
}

function groupByMonthYear(features: FeatureEntry[]): GroupedFeature[] {
  const groups = new Map<string, GroupedFeature>();

  features.forEach((feature) => {
    const date = feature.updated ? new Date(feature.updated) : null;
    
    if (!date || !Number.isFinite(date.getTime())) {
      // Элементы без даты в отдельную группу
      const key = 'no-date';
      if (!groups.has(key)) {
        groups.set(key, {
          year: 0,
          month: 0,
          label: 'Без даты',
          features: []
        });
      }
      groups.get(key)!.features.push(feature);
      return;
    }

    const year = date.getFullYear();
    const month = date.getMonth();
    const key = `${year}-${month}`;

    if (!groups.has(key)) {
      const label = monthYearFormatter.format(date);
      groups.set(key, {
        year,
        month,
        label,
        features: []
      });
    }

    groups.get(key)!.features.push(feature);
  });

  // Сортируем группы: сначала по году (убывание), потом по месяцу (убывание)
  const sortedGroups = Array.from(groups.values()).sort((a, b) => {
    if (a.year === 0 && b.year === 0) return 0;
    if (a.year === 0) return 1;
    if (b.year === 0) return -1;
    
    if (a.year !== b.year) {
      return b.year - a.year;
    }
    return b.month - a.month;
  });

  return sortedGroups;
}

const groupedFeatures = groupByMonthYear(features);
---

<section class={`feature-list ${accentClass}`}>
  <header class="feature-list__header">
    <p class="feature-list__label">{accentLabel}</p>
    <h2 class="feature-list__title">{title}</h2>
    <p class="feature-list__count">
      <span>{features.length}</span> элементов
    </p>
  </header>

  <div class="feature-list__groups">
    {groupedFeatures.map((group, groupIndex) => {
      let itemIndex = 0;
      // Считаем индекс для элементов в предыдущих группах
      for (let i = 0; i < groupIndex; i++) {
        itemIndex += groupedFeatures[i].features.length;
      }

      return (
        <div class="feature-group" key={`${group.year}-${group.month}`}>
          <h3 class="feature-group__header">
            <span class="feature-group__title">{group.label}</span>
            <span class="feature-group__count">{group.features.length}</span>
          </h3>
          <ol class="feature-list__items">
            {group.features.map((feature) => {
              const currentIndex = itemIndex++;
              return (
                <li class="feature-card" key={feature.id}>
                  <p class="feature-card__index">
                    <span>{String(currentIndex + 1).padStart(2, '0')}</span>
                  </p>
                  <div class="feature-card__body">
                    <h4 class="feature-card__title">
                      <a href={feature.link}>{feature.title}</a>
                    </h4>
                    {feature.summaryText && (
                      <p class="feature-card__summary">{feature.summaryText}</p>
                    )}
                  </div>
                  <p class="feature-card__date">{formatDate(feature.updated)}</p>
                </li>
              );
            })}
          </ol>
        </div>
      );
    })}
  </div>
</section>

<style>
  .feature-list {
    position: relative;
    border-radius: 1.5rem;
    padding: clamp(1.8rem, 3vw, 2.6rem);
    background: var(--bg-card);
    overflow: hidden;
    box-shadow:
      0.5rem 0.5rem 0 0 var(--shadow-card-offset),
      0 16px 40px var(--shadow-card-primary);
    border: 3px solid var(--border-strong);
    display: flex;
    flex-direction: column;
    gap: clamp(1.5rem, 2.5vw, 2rem);
  }

  .feature-list::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image:
      linear-gradient(
        135deg,
        rgba(255, 255, 255, 0) 0%,
        rgba(255, 255, 255, 0) 42%,
        rgba(255, 255, 255, 0.92) 70%,
        rgba(255, 255, 255, 1) 100%
      ),
      repeating-linear-gradient(
        45deg,
        rgba(0, 0, 0, 0.04),
        rgba(0, 0, 0, 0.04) 1px,
        transparent 1px,
        transparent 12px
      );
    opacity: 0.75;
    pointer-events: none;
    mix-blend-mode: multiply;
  }

  .feature-list::after {
    content: '';
    position: absolute;
    width: clamp(8rem, 16vw, 12rem);
    height: clamp(8rem, 16vw, 12rem);
    border-radius: 50%;
    right: -15%;
    top: -25%;
    filter: blur(0);
    transform: rotate(12deg);
    opacity: 0.8;
  }

  .feature-list--widely {
    border-color: #152c8f;
  }

  .feature-list--newly {
    border-color: #a42718;
  }

  .feature-list--widely::after {
    background: var(--bg-card-accent-widely);
  }

  .feature-list--newly::after {
    background: var(--bg-card-accent-newly);
  }

  .feature-list__header {
    position: relative;
    z-index: 1;
    display: grid;
    gap: 0.5rem;
  }

  .feature-list__label {
    margin: 0;
    letter-spacing: 0.3em;
    font-size: 0.8rem;
    text-transform: uppercase;
    font-weight: 600;
  }

  .feature-list__title {
    margin: 0;
    font-size: clamp(1.8rem, 3vw, 2.4rem);
    text-transform: uppercase;
    line-height: 1.05;
    letter-spacing: 0.06em;
  }

  .feature-list__count {
    margin: 0;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .feature-list__count span {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #1a1610;
    color: #f7f3ea;
    padding: 0.15em 0.6em;
    border-radius: 2em;
    font-weight: 600;
    margin-right: 0.4em;
  }

  .feature-list__groups {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    gap: clamp(2rem, 3vw, 3rem);
  }

  .feature-group {
    display: flex;
    flex-direction: column;
    gap: clamp(1rem, 1.5vw, 1.5rem);
  }

  .feature-group__header {
    position: sticky;
    top: 1rem;
    z-index: 2;
    display: flex;
    align-items: baseline;
    justify-content: space-between;
    gap: 1rem;
    padding: 0.75rem 1rem;
    margin: 0;
    background: var(--bg-card);
    border: 2px solid var(--border-strong);
    border-radius: 0.75rem;
    box-shadow:
      0.25rem 0.25rem 0 0 var(--shadow-card-offset),
      0 4px 12px var(--shadow-card-primary);
    backdrop-filter: blur(8px);
  }

  .feature-group__title {
    font-size: clamp(1.1rem, 2vw, 1.4rem);
    font-weight: 700;
    text-transform: capitalize;
    letter-spacing: 0.06em;
    color: var(--text-primary);
  }

  .feature-group__count {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: #1a1610;
    color: #f7f3ea;
    padding: 0.15em 0.6em;
    border-radius: 2em;
    font-weight: 600;
    font-size: 0.85rem;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    white-space: nowrap;
    flex-shrink: 0;
  }

  @media (prefers-color-scheme: dark) {
    .feature-group__header {
      background: var(--bg-card);
    }

    .feature-group__count {
      background: #f4ede1;
      color: #1a1610;
    }
  }

  .feature-list__items {
    position: relative;
    z-index: 1;
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: clamp(1rem, 1.5vw, 1.5rem);
  }

  .feature-card {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 1.25rem;
    align-items: start;
    border-bottom: 1px solid var(--text-subtle);
    padding-bottom: 1.25rem;
  }

  .feature-card:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .feature-card__index {
    margin: 0;
    font-size: 1.4rem;
    font-weight: 700;
    letter-spacing: 0.14em;
  }

  .feature-card__index span {
    display: inline-block;
    transform: translateY(-0.15em);
  }

  .feature-card__body {
    display: grid;
    gap: 0.6rem;
  }

  .feature-card__title {
    margin: 0;
    font-size: 1.2rem;
    text-transform: uppercase;
    letter-spacing: 0.04em;
  }

  .feature-card__title a {
    border-bottom: 2px solid transparent;
    transition: border-color 0.2s ease;
  }

  .feature-card__title a:hover {
    border-color: currentColor;
  }

  .feature-card__summary {
    margin: 0;
    font-size: 0.95rem;
    max-width: 48ch;
    color: var(--text-card-muted);
  }

  .feature-card__date {
    grid-column: 2;
    margin: 0;
    font-size: 0.8rem;
    letter-spacing: 0.18em;
    text-transform: uppercase;
    color: var(--text-subtle);
  }

  @media (max-width: 720px) {
    .feature-list {
      padding: 1.6rem;
    }

    .feature-list__title {
      font-size: clamp(1.4rem, 2.5vw, 1.8rem);
    }

    .feature-list__groups {
      gap: clamp(1.5rem, 2.5vw, 2rem);
    }

    .feature-group__header {
      position: relative;
      top: 0;
      padding: 0.6rem 0.85rem;
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .feature-group__title {
      font-size: clamp(1rem, 1.8vw, 1.2rem);
    }

    .feature-group__count {
      font-size: 0.75rem;
    }

    .feature-card {
      grid-template-columns: minmax(0, 1fr);
      gap: 0.75rem;
    }

    .feature-card__index {
      order: -2;
      font-size: 1rem;
      letter-spacing: 0.24em;
    }

    .feature-card__body {
      order: -1;
    }

    .feature-card__title {
      font-size: 1rem;
    }

    .feature-card__date {
      grid-column: 1;
    }
  }
</style>
